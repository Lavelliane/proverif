(* Type declarations *)
set ignoreTypes = false.

type pubKey.
type secKey.
type sharedKey.
type certificate.
type nonce.
type receipt.
type key.
type label.

free sch: channel[private].
free pch: channel.

table srDB(bitstring, certificate). (*eid, CERT.ECASD*)

(*utils*)
fun pk(secKey): pubKey.
fun k2b(key):           bitstring[data, typeConverter].
fun b2k(bitstring):     key[data, typeConverter].
fun l2b(label):        bitstring[data, typeConverter].

(* Encryption/Decryption *)
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, n: key;
sdec(senc(m, n), n) = m.

(* DH key-exchange *)
fun DHkey(secKey, pubKey): key.
equation forall sk1: secKey, sk2: secKey;
DHkey(sk2, pk(sk1)) = DHkey(sk1, pk(sk2)).

(* a Key Derivation function *)
fun KDF(bitstring): key.
letfun verify(certificate: certificate)=
  true.

const ClientHello, ServerHello, ClientKeyExchange, ServerKeyExchange, Finished: label.

(* Events: eUICC registration at SM-SR *)
event beginSM_SR_eUICC_Registration(bitstring, certificate). (*eid, CERT.ECASD*)
event check_EIS(bitstring, certificate). (*eid, CERT.ECASD*)
event endSM_SR_eUICC_Registration(bitstring, certificate). (*EIS is stored in the SM-SR*)

query eid: bitstring, CERT_ECASD: certificate;
inj-event(endSM_SR_eUICC_Registration(eid, CERT_ECASD))
==> inj-event(beginSM_SR_eUICC_Registration(eid, CERT_ECASD)).

query attacker 

(* ================ EUM ================ *)

let EUM(eid: bitstring) =
  new CERT_ECASD: certificate;
  event beginSM_SR_eUICC_Registration(eid, CERT_ECASD); (*Calling registerEIS function*)
  out(sch, (eid, CERT_ECASD)).

(* ================ SM-SR ================ *)

let SM_SR(CERT_SR: certificate) =
  new dh_pubKey_SR: pubKey;
  new dh_secKey_SR: secKey;
  in(sch, (eid: bitstring, CERT_ECASD: certificate));
  get srDB(=eid, hCERT_ECASD) in (*Retrieve EIS from SM-SR STORAGE*)
  if CERT_ECASD <> hCERT_ECASD then (*Checking that no same*)
  (
    event check_EIS(eid, CERT_ECASD); (*Checking if the EIS is stored in the SM-SR*)
    insert srDB(eid, CERT_ECASD);
    event endSM_SR_eUICC_Registration(eid, CERT_ECASD); (*EIS is stored in the SM-SR*)

    (* Start Mutual Authentication with the eUICC and SM-DP *)
    in(sch, (l2b(ClientHello), CERT_DP: certificate));
    if verify(CERT_DP) then
    (
      out(sch, (l2b(ServerHello), CERT_SR, dh_pubKey_SR));
      in(sch, (l2b(ClientKeyExchange), dh_pubKey_DP: pubKey));
      let sharedKey = DHkey(dh_secKey_SR, dh_pubKey_DP) in
      let symmetricKey = KDF(k2b(sharedKey)) in
      in(sch, (l2b(Finished), handshakeMsg: bitstring));
      let decHandshake = sdec(handshakeMsg, symmetricKey) in
      if decHandshake = l2b(Finished) then
      (
        (* Securely receive request from SM-DP *)
        in(sch, (requestEis: bitstring));
        let eid_dec = sdec(requestEis, symmetricKey) in
        (* Retrieve EIS from storage *)
        get srDB(=eid_dec, hCERT_ECASD) in 
        let eis = senc((eid_dec, hCERT_ECASD), symmetricKey) in
        (* Send encrypted EIS to SM-DP *)
        out(sch, (eis))
      )
    )
  ).

(* ================ OPERATOR ================ *)
  
let OPERATOR(eid: bitstring, srid: bitstring, iccid: bitstring) =
  (* Profile download request (eid, srid, iccid) *)
  out(pch, (eid, srid, iccid)).

(* ================ SM-DP ================ *)


let SM_DP(CERT_DP: certificate)=
  new dh_pubKey_DP: pubKey;
  new dh_secKey_DP: secKey;
  (* Get profile download request data *)
  in(pch, (eid: bitstring, srid: bitstring, iccid: bitstring));
  
  (* Start Mutual Authentication with SM-SR *)
  out(sch, (l2b(ClientHello), CERT_DP));
  in(sch, (l2b(ServerHello), CERT_SR: certificate, dh_pubKey_SR: pubKey));
  if verify(CERT_SR) then
  (
    out(sch, (l2b(ClientKeyExchange), dh_pubKey_DP));
    let sharedKey = DHkey(dh_secKey_DP, dh_pubKey_SR) in
    let symmetricKey = KDF(k2b(sharedKey)) in
    out(sch, (l2b(Finished), senc(l2b(Finished), symmetricKey)));
    let requestEis = senc(eid, symmetricKey) in
    out(sch, (requestEis));
    in(sch, (eis: bitstring))
  ).
 
  


(* ================ MAIN PROCESS ================ *)


process
  new eid: bitstring; (* eUICC ID *)
  new srid: bitstring; (* SM-SR ID *)
  new iccid: bitstring; (* ICCID *)

  (* CI Issued Certificates *)
  new CERT_SR: certificate;
  new CERT_DP: certificate;


  (!EUM(eid)) |
  (!SM_SR(CERT_SR)) |
  (!OPERATOR(eid, srid, iccid)) |
  (!SM_DP(CERT_DP))