(* Types *)
type key.
type nonce.
type id.
type qrcode.

(* Type converters *)
fun nonce2bits(nonce): bitstring [typeConverter].
fun key2bits(key): bitstring [typeConverter].
fun id2bits(id): bitstring [typeConverter].
fun bits2qr(bitstring): qrcode [typeConverter].
fun qr2bits(qrcode): bitstring [typeConverter].
fun bits2id(bitstring): id [typeConverter].

(* Channels *)
free bluetooth: channel.    (* Bluetooth channel *)
free oob: channel [private].  (* Visual OOB channel for QR codes *)

(* Constants and variables *)
free ID_w: id [private].    (* Wearable device ID *)
free ID_m: id [private].    (* Mobile terminal ID *)

(* Functions *)
fun E_QR(bitstring): qrcode.    (* QR code encryption *)
reduc forall m: bitstring; D_QR(E_QR(m)) = m.  (* QR code decryption *)

fun H(bitstring): bitstring.     (* Hash function *)
fun concat(bitstring, bitstring): bitstring.  (* Concatenation *)

(* XOR operation *)
fun xor(bitstring, bitstring): bitstring.
equation forall x: bitstring, y: bitstring; 
    xor(xor(x,y), y) = x.

(* Rotate operation *)
fun rot(bitstring, bitstring): bitstring.

(* Events for authentication verification *)
event WDStartsSession(id, id).
event MTStartsSession(id, id).
event WDCompletesSession(id, id).
event MTCompletesSession(id, id).

(* Security Properties *)
query id1:id, id2:id; 
    inj-event(WDCompletesSession(id1,id2)) ==> 
    inj-event(MTStartsSession(id2,id1)).

query id1:id, id2:id; 
    inj-event(MTCompletesSession(id1,id2)) ==> 
    inj-event(WDStartsSession(id2,id1)).

query attacker(ID_w).
query attacker(ID_m).


(* Wearable Device Process *)
let WD(id_w: id, k_w: key) =
    event WDStartsSession(id_w, ID_m);
    
    (* Generate random numbers *)
    new r1: nonce;
    new r2: nonce;
    
    let qr1 = E_QR(concat(key2bits(k_w), 
                         concat(nonce2bits(r1), nonce2bits(r2)))) in
    out(oob, qr1);
    
    in(bluetooth, (a:bitstring, b:bitstring, c:bitstring));
    
    let k_m_bits = xor(xor(a, key2bits(k_w)), nonce2bits(r1)) in
    let id_m_bits = xor(xor(b, id2bits(id_w)), nonce2bits(r2)) in
    let extracted_id_m = bits2id(id_m_bits) in
    
    let check_c = xor(key2bits(k_w), k_m_bits) in
    if c = check_c then
    
    let s = concat(key2bits(k_w), k_m_bits) in
    let r = xor(nonce2bits(r1), nonce2bits(r2)) in
    let m1 = H(concat(id2bits(id_w),
                     concat(s, concat(r, id_m_bits)))) in
    
    let qr2 = E_QR(m1) in
    out(oob, qr2);
    
    event WDCompletesSession(id_w, extracted_id_m).

(* Mobile Terminal Process *)
let MT(id_m: id, k_m: key) =
    event MTStartsSession(id_m, ID_w);
    
    (* Receive initial QR code *)
    in(oob, qr1: qrcode);
    let keys_and_nonces = D_QR(qr1) in
    
    let k_w_bits = keys_and_nonces in  (* simplified *)
    let r1_bits = keys_and_nonces in   (* simplified *)
    let r2_bits = keys_and_nonces in   (* simplified *)
    
    let a = xor(xor(k_w_bits, key2bits(k_m)), r1_bits) in
    let b = xor(xor(id2bits(ID_w), id2bits(id_m)), r2_bits) in
    let c = xor(k_w_bits, key2bits(k_m)) in
    
    out(bluetooth, (a,b,c));

    in(oob, qr2: qrcode);
    let m1 = D_QR(qr2) in
    
    let s = concat(k_w_bits, key2bits(k_m)) in
    let r = xor(r1_bits, r2_bits) in
    let m1_check = H(concat(id2bits(ID_w),
                           concat(s, concat(r, id2bits(id_m))))) in
    
    if m1 = m1_check then
    event MTCompletesSession(id_m, ID_w).

(* Main Process *)
process 
    new k_w: key;
    new k_m: key;
    (!WD(ID_w, k_w)) | 
    (!MT(ID_m, k_m)) |
    phase 1; out(bluetooth, (k_w, k_m))
